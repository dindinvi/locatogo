<?php

namespace djepo\LocationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * loca_logementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class logementRepository extends EntityRepository
{
    public function getSearch($Ville=null)//$dateD=null, $dateF=null,
        {
           $qb = $this->createQueryBuilder('l');
         
           if ( $Ville ){  
                $qb->leftJoin('l.propriete', 'pro')->addSelect('pro')
                   ->leftJoin('pro.adresse', 'a')->addSelect('a')
                   ->leftJoin('a.ville', 'v')->addSelect('v');
           }
           
            $qb->leftjoin('l.image', 'i')->addSelect('i') ;
            return  $qb;
        }
    
     public function getSearchSelection($maxperpage=null)
        {
             
            $qb = $this->getSearch();
            $qb = $this->whereIsActivated($qb);
            
            $qb->orderBy('l.id','DESC');
             if ( $maxperpage ){
                $qb->setMaxResults($maxperpage); 
             }
             /*else{
               $qb->setMaxResults(3) ; 
             }
              */           
             return $qb->getQuery()->getResult();
        } 
        
        
        
        public function getSearchLocation($page=1, $maxperpage=10,$dateD=null,$dateF=null,$Ville=null,$Budget=null)
        {
             
            if ( $page < 1 ) { throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").'); }
            
            
             $qb = $this->getSearch( $Ville );
             $qb = $this->whereIsActivated($qb);
            
            if ( $Ville ){ $qb = $this->whereVille($qb, $Ville ); }
            if ( $Budget ){ $qb = $this->whereBudget($qb, $Budget); }
            
            
             $qb->setFirstResult(($page-1) * $maxperpage)->setMaxResults($maxperpage);
              return new Paginator($qb);
        }
        
      
        public function whereVille(\Doctrine\ORM\QueryBuilder $qb, $Ville )
        {
                $qb->andWhere('v.nomVille = :Ville')->setParameter('Ville', $Ville) ;
                 return $qb;
        }
        
        public function whereBudget(\Doctrine\ORM\QueryBuilder $qb, $Budget )
        {
                $qb->andWhere('l.montantloyer <= :Budget')->setParameter('Budget', $Budget) ;
                 return $qb;
        }
        
         
        /*  
         * whereIsActivated porte sur les logement valides 
         */
         public function whereIsActivated(\Doctrine\ORM\QueryBuilder $qb )
        {
                $qb->where('l.isActivated = :valide')->setParameter('valide', '1') ;
                 return $qb;
        }
        
        public function getMesAnnonces($id)
        {
            $qb = $this->searchAnnonces($id);
            $qb->where('u.id = :auteur')->setParameter('auteur', $id); // On peut ajouter ce qu'on veut avant  
            
            return $qb->getQuery()->getResult();
            
        } 
        
        public function searchAnnonces($id=null)
        {
            $qb = $this->createQueryBuilder('l')->join('l.image', 'i')->addSelect('i') ; 
            //donc proprio
           if( $id ) {  
               $qb->join('l.propriete', 'p')
              ->addSelect('p')
              ->join('p.proprietaire', 'pr')
              ->addSelect('pr')
              ->join('pr.personne', 'pe')
              ->addSelect('pe')
              ->join('pe.user', 'u') 
              ->addSelect('u') ; 
           } 
            return $qb;
        }
       /*
        * GESTION DES IMAGES
        * 
        */
        public function getImage($id=null)
        {
            $qb = $this->searchAnnonces($id);
            if( $id ) {  $qb->where('u.id = :auteur')->setParameter('auteur', $id); }  // On peut ajouter ce qu'on veut avant 
            else{
                  $qb = $this->whereIsActivated($qb);  
            }
            $qb->orderBy('l.id','ASC');
              return $qb->getQuery()->getResult();
        } 
        
        /*
         * 
         * 
         */
        
}
